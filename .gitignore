import pandas as pd
import os
import chardet

def detectar_codificacion(archivo):
    """Detecta la codificación de un archivo CSV."""
    with open(archivo, 'rb') as f:
        rawdata = f.read()
        result = chardet.detect(rawdata)
        return result['encoding']

def leer_csv_con_manejo_errores(archivo, sep=',', on_bad_lines='skip', encoding=None):
    """Lee un archivo CSV y maneja posibles errores de parsing."""
    if encoding is None:
        encoding = detectar_codificacion(archivo)

    try:
        df = pd.read_csv(archivo, sep=sep, on_bad_lines=on_bad_lines, encoding=encoding, engine='python')
        return df
    except pd.errors.ParserError as e:
        print(f"Error al leer el archivo {archivo}: {e}")
        return None
    except UnicodeDecodeError as e:
        print(f"Error de decodificación en el archivo {archivo}: {e}. Intenta especificar una codificación diferente.")
        return None
    except Exception as e:
        print(f"Error inesperado al leer {archivo}: {e}")
        return None


def validar_dataframe(df, df_name, join_cols):
    """Valida que un DataFrame tenga las columnas necesarias."""
    if df is None:
        print(f"Error: DataFrame '{df_name}' no se cargó correctamente.")
        return False

    for col in join_cols:
        if col not in df.columns:
            print(f"Error: La columna de unión '{col}' no existe en el DataFrame '{df_name}'.")
            return False
    return True

# Rutas de archivos
ruta_base = "C:\\Users\\HP\\Desktop\\xd"
archivo_paciente = os.path.join(ruta_base, "MaestroPaciente1324904.csv")
archivo_personal = os.path.join(ruta_base, "MaestroPersonal1323310.csv")
archivo_registrador = os.path.join(ruta_base, "MaestroRegistrador1324951.csv")
archivo_trama = os.path.join(ruta_base, "NominalTrama15012025_132426.csv")
ruta_salida = "C:\\Users\\HP\\Desktop\\xd2"
archivo_salida = os.path.join(ruta_salida, "resultado_final.csv")


# Leer los archivos CSV
df_paciente = leer_csv_con_manejo_errores(archivo_paciente, sep=';')
if df_paciente is not None:
    print("Columnas de df_paciente:", df_paciente.columns)

df_personal = leer_csv_con_manejo_errores(archivo_personal, sep=';')
if df_personal is not None:
    print("Columnas de df_personal:", df_personal.columns)

df_registrador = leer_csv_con_manejo_errores(archivo_registrador, sep=';')
if df_registrador is not None:
    print("Columnas de df_registrador:", df_registrador.columns)


df_trama = leer_csv_con_manejo_errores(archivo_trama, sep=';')
if df_trama is not None:
    print("Columnas de df_trama:", df_trama.columns)

# Validación y Unión (con cambios importantes)

if all(df is not None for df in [df_paciente, df_personal, df_registrador, df_trama]):
    try:
        id_paciente_trama = df_trama.columns[df_trama.columns.str.contains('Id_Paciente', case=False, na=False)][0]
    except IndexError:
        print("Error: No se encuentra la columna 'Id_Paciente' en df_trama. Revisa el nombre o la estructura del archivo.")
        exit()

    try:
        id_personal_trama = df_trama.columns[df_trama.columns.str.contains('Id_Personal', case=False, na=False)][0]
    except IndexError:
        print("Error: No se encuentra la columna 'Id_Personal' en df_trama. Revisa el nombre o la estructura del archivo.")
        exit()

    try:
        id_registrador_trama = df_trama.columns[df_trama.columns.str.contains('Id_Registrador', case=False, na=False)][0]
    except IndexError:
        print("Error: No se encuentra la columna 'Id_Registrador' en df_trama. Revisa el nombre o la estructura del archivo.")
        exit()


    df_merged = pd.merge(df_trama, df_paciente, on=id_paciente_trama, how='left', suffixes=('_trama', '_paciente'))
    df_merged = pd.merge(df_merged, df_personal, on='Id_Personal', how='left', suffixes=('', '_personal'))
    df_merged = pd.merge(df_merged, df_registrador, on='Id_Registrador', how='left', suffixes=('', '_registrador'))
    df_merged = df_merged.fillna('N/A')

    os.makedirs(ruta_salida, exist_ok=True)
    df_merged.to_csv(archivo_salida, index=False)
    print(f"Los archivos se han unido correctamente y guardado en: {archivo_salida}")
else:
    print("No se pudieron unir todos los archivos. Verifica los mensajes de error.")
